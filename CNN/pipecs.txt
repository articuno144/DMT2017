         public void PythonPipe()
        {
            usingPipe = true;
            sendData("M4dg");
        }

       public void PipeComms(char[] charArr)
        {
            byte[] buf = new byte[6];
            for (i = 0; i < 6; i++)
            {
                buf[i] = (byte)charArr[i];
            }   
            bw = new BinaryWriter(server);
            bw.Write((uint)buf.Length);                // Write string length
            bw.Write(buf);                              // Write string
            var len = (int)br.ReadUInt32();            // Read string length
            pipeArr = br.ReadChars(len);
        }

        void PipeWait()
        {
            server = new NamedPipeServerStream("GesturePipe");
            br = new BinaryReader(server);
            bw = new BinaryWriter(server);
            server.WaitForConnection();
            pipeConnected = true;
        }

        void MMGdatain(List<int> message, int GyroValue, bool docked)
        {
            if (saveData == true)
            {
                //       float val = (message[0] * 256) + message[1];
                //       try { file.WriteLine((val.ToString())); }
                //       catch { }
            }
            else
            {

                if (usingPipe)
                {
                    if (!pipeConnected)
                    {
                        PipeWait();
                    }
                    pipeCounter++;
                    if (pipeConnected & pipeCounter==9)
                    {
                        pipeCounter = 0;
                        for (i = 0; i < 6; i++)
                        {
                            MMGval[i] = (char)message[i];
                        }
                        try
                        {
                            PipeComms(MMGval);
                        }
                        catch (Exception)
                        {
                            pipeConnected = false;
                            server.Close();
                            server.Dispose();                     // When client disconnects
                        }
                    }
                }
